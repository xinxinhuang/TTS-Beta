@page
@model TeeTime.Pages.TeeSheet.ViewModel
@{
    ViewData["Title"] = "View Tee Sheet";
}

<style>
    /* Styling for tab that's selected for creating an event */
    .nav-link.event-selected {
        border-color: #ffc107 !important;
        background-color: rgba(255, 193, 7, 0.1) !important;
    }
    
    /* Event color indicators */
    .event-color {
        display: inline-block;
        width: 16px;
        height: 16px;
        border-radius: 50%;
        margin-right: 5px;
        vertical-align: middle;
    }
    
    .event-color-red { background-color: #dc3545; }
    .event-color-green { background-color: #198754; }
    .event-color-blue { background-color: #0d6efd; }
    .event-color-yellow { background-color: #ffc107; }
    .event-color-purple { background-color: #6f42c1; }
</style>

<!-- Event Confirmation Modal -->
<div class="modal fade" id="eventConfirmationModal" tabindex="-1" aria-labelledby="eventConfirmationModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="eventConfirmationModalLabel">Confirm Event Creation</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to create the following event?</p>
        <div class="mb-3"><strong>Event Name:</strong> <span id="confirmEventName"></span></div>
        <div class="mb-3"><strong>Date:</strong> <span id="confirmEventDate"></span></div>
        <div class="mb-3"><strong>Time:</strong> <span id="confirmEventTime"></span></div>
        <div class="alert alert-warning">
          <i class="bi bi-exclamation-triangle-fill"></i> This will block all tee times during this period.
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="confirmEventCreation">Create Event</button>
      </div>
    </div>
  </div>
</div>

<!-- Delete Event Confirmation Modal -->
<div class="modal fade" id="deleteEventModal" tabindex="-1" aria-labelledby="deleteEventModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteEventModalLabel">Confirm Delete</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete the event "<span id="deleteEventName"></span>"?</p>
        <div class="alert alert-danger">
          <i class="bi bi-exclamation-triangle-fill"></i> This will make all affected tee times available again.
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <form method="post">
          @Html.AntiForgeryToken()
          <input type="hidden" id="deleteEventId" name="eventId" />
          <input type="hidden" id="deleteStartDate" name="startDate" />
          <button type="submit" class="btn btn-danger" asp-page-handler="DeleteEvent">Delete Event</button>
        </form>
      </div>
    </div>
  </div>
</div>

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Tee Sheet - Week of @Model.StartDate.ToString("MMMM d, yyyy")</h2>
        <a asp-page="./Manage" class="btn btn-primary">Back to Management</a>
    </div>
    
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show mb-4" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show mb-4" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    
    @if (User.IsInRole("Clerk") || User.IsInRole("Pro Shop Staff") || User.IsInRole("Admin"))
    {
        <!-- Special Event Section -->
        <div class="card mb-4">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Create Special Event</h5>
            </div>
            <div class="card-body">
                <form method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="startDate" value="@Model.StartDate.ToString("yyyy-MM-dd")" />
                    <div id="selectedDateDisplay" class="alert alert-info mb-3"></div>
                    <div class="row">
                        <div class="col-md-3">
                            <div class="form-group mb-3">
                                <label asp-for="EventName" class="control-label">Event Name</label>
                                <input asp-for="EventName" type="text" class="form-control" />
                                <span asp-validation-for="EventName" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group mb-3">
                                <label for="SelectedStartTime" class="control-label">Start Time</label>
                                <select asp-for="SelectedStartTime" class="form-control" id="startTimeDropdown">
                                    <option value="">-- Select Start Time --</option>
                                </select>
                                <span asp-validation-for="SelectedStartTime" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group mb-3">
                                <label for="SelectedEndTime" class="control-label">End Time</label>
                                <select asp-for="SelectedEndTime" class="form-control" id="endTimeDropdown">
                                    <option value="">-- Select End Time --</option>
                                </select>
                                <span asp-validation-for="SelectedEndTime" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group mb-3">
                                <label asp-for="EventColor" class="control-label">Event Color</label>
                                <select asp-for="EventColor" class="form-control" id="eventColor">
                                    <option value="blue">Blue</option>
                                    <option value="green">Green</option>
                                    <option value="red">Red</option>
                                    <option value="yellow">Yellow</option>
                                    <option value="purple">Purple</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <!-- Hidden field for event date that gets set by JavaScript -->
                    <input asp-for="EventDate" type="hidden" id="eventDate" />
                    <span asp-validation-for="EventDate" class="text-danger"></span>
                    <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#eventConfirmationModal">Add Event</button>
                    <button type="submit" asp-page-handler="CreateEvent" class="d-none" id="addEventSubmitBtn">Submit</button>
                </form>
            </div>
        </div>
    }
    
    <!-- Existing Events Section -->
    @if (Model.AllEvents.Any())
    {
        <div class="card mb-4">
            <div class="card-header bg-warning">
                <h5 class="mb-0">Scheduled Events This Week</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Event Name</th>
                                <th>Start Time</th>
                                <th>End Time</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var ev in Model.AllEvents.OrderBy(e => e.EventDate).ThenBy(e => e.StartTime))
                            {
                                <tr>
                                    <td>@ev.EventDate.ToString("ddd, MMM d, yyyy")</td>
                                    <td>@ev.EventName</td>
                                    <td>@string.Format("{0:hh\\:mm}", ev.StartTime)</td>
                                    <td>@string.Format("{0:hh\\:mm}", ev.EndTime)</td>
                                    <td>
                                        <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteEventModal" 
                                               data-event-id="@ev.EventID" data-event-name="@ev.EventName" 
                                               data-start-date="@Model.StartDate.ToString("yyyy-MM-dd")">Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
    
    <div class="card">
        <div class="card-header">
            <ul class="nav nav-tabs card-header-tabs" id="teeSheetTabs" role="tablist">
                @for (int i = 0; i < 7; i++)
                {
                    var date = Model.StartDate.AddDays(i);
                    var dayName = date.DayOfWeek.ToString();
                    var isActive = i == 0 ? "active" : "";
                    
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @isActive" id="@dayName-tab" data-bs-toggle="tab" 
                                data-bs-target="#@dayName" type="button" role="tab" 
                                aria-controls="@dayName" aria-selected="@(i == 0 ? "true" : "false")">
                            @dayName<br/>@date.ToString("MM/dd")
                        </button>
                    </li>
                }
            </ul>
        </div>
        <div class="card-body">
            <div class="tab-content" id="teeSheetTabContent">
                @for (int i = 0; i < 7; i++)
                {
                    var date = Model.StartDate.AddDays(i);
                    var dayName = date.DayOfWeek.ToString();
                    var isActive = i == 0 ? "active" : "";
                    
                    <div class="tab-pane fade show @isActive" id="@dayName" role="tabpanel" aria-labelledby="@dayName-tab">
                        <h4>@dayName - @date.ToString("MMMM d, yyyy")</h4>
                        
                        @if (Model.TeeSheets.TryGetValue(date.Date, out var teeTimesForDay))
                        {
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>Time</th>
                                            <th>Status</th>
                                            @if (User.IsInRole("Clerk") || User.IsInRole("Pro Shop Staff") || User.IsInRole("Admin"))
                                            {
                                                <th>Event</th>
                                            }
                                            else
                                            {
                                                <th>Members</th>
                                                <th>Players</th>
                                                <th>Carts</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var teeTime in teeTimesForDay.OrderBy(t => t.ScheduledTime))
                                        {
                                            <tr>
                                                <td>@teeTime.ScheduledTime.Hours.ToString("00"):@teeTime.ScheduledTime.Minutes.ToString("00")</td>
                                                <td>
                                                    @if (teeTime.IsAvailable)
                                                    {
                                                        <span class="badge bg-success">Available</span>
                                                    }
                                                    else if (teeTime.Reservations != null && teeTime.Reservations.Any())
                                                    {
                                                        <span class="badge bg-primary">Booked</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-danger">Blocked</span>
                                                    }
                                                </td>
                                                @if (User.IsInRole("Clerk") || User.IsInRole("Pro Shop Staff") || User.IsInRole("Admin"))
                                                {
                                                    <td>
                                                        @if (teeTime.EventID.HasValue && teeTime.Event != null)
                                                        {
                                                            <span class="event-color event-color-@(string.IsNullOrEmpty(teeTime.Event.EventColor) ? "blue" : teeTime.Event.EventColor)"></span>
                                                            @teeTime.Event.EventName
                                                        }
                                                    </td>
                                                }
                                                else
                                                {
                                                    <td>
                                                        @if (teeTime.Reservations != null && teeTime.Reservations.Any())
                                                        {
                                                            @foreach (var reservation in teeTime.Reservations)
                                                            {
                                                                if (reservation.Member?.User != null)
                                                                {
                                                                    <div>@reservation.Member.User.FirstName @reservation.Member.User.LastName</div>
                                                                }
                                                            }
                                                        }
                                                        else if (!teeTime.IsAvailable)
                                                        {
                                                            @if (teeTime.EventID.HasValue)
                                                            {
                                                                <span class="badge bg-warning text-dark">@(teeTime.Event?.EventName ?? "Event")</span>
                                                            }
                                                            else
                                                            {
                                                                <span>@(Model.Events.TryGetValue(teeTime.ScheduledGolfTimeID, out var eventName) ? eventName : "Blocked")</span>
                                                            }
                                                        }
                                                    </td>
                                                    <td>
                                                        @(teeTime.Reservations?.Sum(r => r.NumberOfPlayers) ?? 0)
                                                    </td>
                                                    <td>
                                                        @(teeTime.Reservations?.Sum(r => r.NumberOfCarts) ?? 0)
                                                    </td>
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                No tee times have been generated for this day.
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
    
    <div class="mt-4">
        <a asp-page="./Manage" class="btn btn-primary">Back to Management</a>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Get the anti-forgery token
            var token = $('input[name="__RequestVerificationToken"]').val();
            
            // Ensure startDate is set from URL parameter if available
            var currentUrl = new URL(window.location.href);
            var startDateParam = currentUrl.searchParams.get('startDate');
            if (startDateParam) {
                $('input[name="startDate"]').val(startDateParam);
            }
            
            // Function to load available times for a selected date
            function loadAvailableTimes(date) {
                $.ajax({
                    url: '?handler=AvailableTimes',
                    data: { date: date },
                    type: 'GET',
                    headers: {
                        "RequestVerificationToken": token
                    },
                    success: function(data) {
                        const startDropdown = $('#startTimeDropdown');
                        const endDropdown = $('#endTimeDropdown');
                        
                        // Clear existing options
                        startDropdown.empty();
                        endDropdown.empty();
                        
                        // Add default option
                        startDropdown.append($('<option>', {
                            value: '',
                            text: '-- Select Start Time --'
                        }));
                        
                        endDropdown.append($('<option>', {
                            value: '',
                            text: '-- Select End Time --'
                        }));
                        
                        // Add time options
                        if (data && data.length > 0) {
                            $.each(data, function(i, time) {
                                startDropdown.append($('<option>', {
                                    value: time.time,
                                    text: time.time
                                }));
                                
                                endDropdown.append($('<option>', {
                                    value: time.time,
                                    text: time.time
                                }));
                            });
                        } else {
                            startDropdown.append($('<option>', {
                                value: '',
                                text: 'No available times'
                            }));
                            
                            endDropdown.append($('<option>', {
                                value: '',
                                text: 'No available times'
                            }));
                        }
                    },
                    error: function() {
                        alert('Error loading available times. Please try again.');
                    }
                });
            }
            
            // Initialize on page load if date is already selected
            var selectedDate = $('#teeSheetTabs button.active').data('bs-target').replace('#', '');
            var date = new Date('@Model.StartDate.ToString("yyyy-MM-dd")');
            var dayOfWeek = date.getUTCDay();
            var dayName = date.toLocaleString('en-us', { weekday: 'long' });
            if (selectedDate === dayName) {
                date = new Date('@Model.StartDate.ToString("yyyy-MM-dd")');
            } else {
                for (var i = 0; i < 7; i++) {
                    if (selectedDate === date.toLocaleString('en-us', { weekday: 'long' })) {
                        break;
                    }
                    date.setUTCDate(date.getUTCDate() + 1);
                }
            }
            $('#selectedDateDisplay').text('Selected Date: ' + date.toLocaleString('en-us', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }));
            
            // Format the date to avoid timezone issues (YYYY-MM-DD format)
            var year = date.getUTCFullYear();
            var month = (date.getUTCMonth() + 1).toString().padStart(2, '0');
            var day = date.getUTCDate().toString().padStart(2, '0');
            var formattedDate = year + '-' + month + '-' + day;
            $('#eventDate').val(formattedDate);
            
            loadAvailableTimes(formattedDate);
            
            // Load available times when date changes
            $('#teeSheetTabs button').on('shown.bs.tab', function (e) {
                var selectedDate = $(e.target).data('bs-target').replace('#', '');
                var date = new Date('@Model.StartDate.ToString("yyyy-MM-dd")');
                var dayOfWeek = date.getUTCDay();
                var dayName = date.toLocaleString('en-us', { weekday: 'long' });
                if (selectedDate === dayName) {
                    date = new Date('@Model.StartDate.ToString("yyyy-MM-dd")');
                } else {
                    for (var i = 0; i < 7; i++) {
                        if (selectedDate === date.toLocaleString('en-us', { weekday: 'long' })) {
                            break;
                        }
                        date.setUTCDate(date.getUTCDate() + 1);
                    }
                }
                $('#selectedDateDisplay').text('Selected Date: ' + date.toLocaleString('en-us', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }));
                
                // Format the date to avoid timezone issues (YYYY-MM-DD format)
                var year = date.getUTCFullYear();
                var month = (date.getUTCMonth() + 1).toString().padStart(2, '0');
                var day = date.getUTCDate().toString().padStart(2, '0');
                var formattedDate = year + '-' + month + '-' + day;
                $('#eventDate').val(formattedDate);
                
                loadAvailableTimes(formattedDate);
            });
            
            // Validation for end time after start time
            $('#startTimeDropdown, #endTimeDropdown').on('change', function() {
                const startTime = $('#startTimeDropdown').val();
                const endTime = $('#endTimeDropdown').val();
                
                if (startTime && endTime && startTime >= endTime) {
                    alert('End time must be after start time.');
                    $('#endTimeDropdown').val('');
                }
            });
            
            // Event creation confirmation modal
            $('#eventConfirmationModal').on('show.bs.modal', function(event) {
                var modal = $(this);
                modal.find('#confirmEventName').text($('#EventName').val());
                modal.find('#confirmEventDate').text($('#eventDate').val());
                modal.find('#confirmEventTime').text($('#startTimeDropdown').val() + ' - ' + $('#endTimeDropdown').val());
            });
            
            // Event creation confirmation
            $('#confirmEventCreation').on('click', function() {
                $('#eventConfirmationModal').modal('hide');
                // Make sure the form includes the current startDate
                var currentUrl = new URL(window.location.href);
                var startDateParam = currentUrl.searchParams.get('startDate');
                if (startDateParam) {
                    $('input[name="startDate"]').val(startDateParam);
                }
                $('#addEventSubmitBtn').click();
            });
            
            // Delete event confirmation modal
            $('#deleteEventModal').on('show.bs.modal', function(event) {
                var modal = $(this);
                var button = $(event.relatedTarget);
                var eventId = button.data('event-id');
                var eventName = button.data('event-name');
                var startDate = button.data('start-date');
                modal.find('#deleteEventName').text(eventName);
                modal.find('#deleteEventId').val(eventId);
                modal.find('#deleteStartDate').val(startDate);
                
                // Fall back to URL parameter only if button data is not available
                if (!startDate) {
                    var currentUrl = new URL(window.location.href);
                    var startDateParam = currentUrl.searchParams.get('startDate');
                    if (startDateParam) {
                        modal.find('#deleteStartDate').val(startDateParam);
                    }
                }
            });
        });
    </script>
}
